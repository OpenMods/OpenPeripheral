
function printUsage()
	print( "Usage: monitor <side> <program> <arguments>" )
	return
end

local tArgs = { ... }
if #tArgs < 2 then
	printUsage()
	return
end

local sSide = tArgs[1]
if peripheral.getType( sSide ) ~= "monitor" then
	print( "No monitor on "..sSide.." side" )
	return
end

local sProgram = tArgs[2]
local sPath = shell.resolveProgram( sProgram )
if sPath == nil then
	print( "No such program: "..sProgram )
	return
end

print( "Running "..sProgram.." on "..sSide.." monitor" )

local monitor = peripheral.wrap( sSide )
term.redirect( monitor )

local co = coroutine.create( function()
    shell.run( sProgram, unpack( tArgs, 3 ) )
end )

local function resume( ... )
    local ok, param = coroutine.resume( co, ... )
    if not ok then
    	printError( param )
    end
    return param
end

local ok, param = pcall( function()
	local sFilter = resume()
	while coroutine.status( co ) ~= "dead" do
		local tEvent = { os.pullEventRaw() }
		if sFilter == nil or tEvent[1] == sFilter or tEvent[1] == "terminate" then
			sFilter = resume( unpack( tEvent ) )
		end
		if coroutine.status( co ) ~= "dead" and (sFilter == nil or sFilter == "mouse_click") then
			if tEvent[1] == "monitor_touch" and tEvent[2] == sSide then
				sFilter = resume( "mouse_click", 1, unpack( tEvent, 3 ) )
			end
		end
	end
end )

term.restore()
if not ok then
	printError( param )
end
	
